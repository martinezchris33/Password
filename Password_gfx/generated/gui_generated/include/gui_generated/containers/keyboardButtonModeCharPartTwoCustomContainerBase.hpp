/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef KEYBOARDBUTTONMODECHARPARTTWOCUSTOMCONTAINERBASE_HPP
#define KEYBOARDBUTTONMODECHARPARTTWOCUSTOMCONTAINERBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/widgets/ToggleButton.hpp>

class keyboardButtonModeCharPartTwoCustomContainerBase : public touchgfx::Container
{
public:
    keyboardButtonModeCharPartTwoCustomContainerBase();
    virtual ~keyboardButtonModeCharPartTwoCustomContainerBase();
    virtual void initialize();

    /*
     * Custom Trigger Callback Setters
     */
    void setValueModeCharPartTwoCallback(touchgfx::GenericCallback<>& callback)
    {
        this->valueModeCharPartTwoCallback = &callback;
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Custom Trigger Emitters
     */
    virtual void emitValueModeCharPartTwoCallback()
    {
        if (valueModeCharPartTwoCallback && valueModeCharPartTwoCallback->isValid())
        {
            this->valueModeCharPartTwoCallback->execute();
        }
    }

    /*
     * Member Declarations
     */
    touchgfx::ToggleButton characterPartTwoToggleButton;

private:

    /*
     * Custom Trigger Callback Declarations
     */
    touchgfx::GenericCallback<>* valueModeCharPartTwoCallback;

    /*
     * Callback Declarations
     */
    touchgfx::Callback<keyboardButtonModeCharPartTwoCustomContainerBase, const touchgfx::AbstractButton&> buttonCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);

};

#endif // KEYBOARDBUTTONMODECHARPARTTWOCUSTOMCONTAINERBASE_HPP
