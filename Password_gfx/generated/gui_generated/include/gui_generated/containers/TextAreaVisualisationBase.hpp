/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef TEXTAREAVISUALISATIONBASE_HPP
#define TEXTAREAVISUALISATIONBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/ToggleButton.hpp>

class TextAreaVisualisationBase : public touchgfx::Container
{
public:
    TextAreaVisualisationBase();
    virtual ~TextAreaVisualisationBase();
    virtual void initialize();

    /*
     * Custom Actions
     */
    virtual void writeCharacter(char value)
    {
        // Override and implement this function in Screen1
    }
    
    virtual void deleteLastChracter()
    {
        // Override and implement this function in Screen1
    }
    
    virtual void visualizationText()
    {
        // Override and implement this function in Screen1
    }
    

    /*
     * Custom Trigger Callback Setters
     */
    void setBufferTextCallback(touchgfx::GenericCallback<char>& callback)
    {
        this->bufferTextCallback = &callback;
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Custom Trigger Emitters
     */
    virtual void emitBufferTextCallback(char value)
    {
        if (bufferTextCallback && bufferTextCallback->isValid())
        {
            this->bufferTextCallback->execute( value);
        }
    }

    /*
     * Member Declarations
     */
    touchgfx::Box fond;
    touchgfx::TextAreaWithOneWildcard textArea1;
    touchgfx::ToggleButton visibleButton;

    /*
     * Wildcard Buffers
     */
    static const uint16_t TEXTAREA1_SIZE = 60;
    touchgfx::Unicode::UnicodeChar textArea1Buffer[TEXTAREA1_SIZE];

private:

    /*
     * Custom Trigger Callback Declarations
     */
    touchgfx::GenericCallback<char>* bufferTextCallback;

    /*
     * Callback Declarations
     */
    touchgfx::Callback<TextAreaVisualisationBase, const touchgfx::AbstractButton&> buttonCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);

};

#endif // TEXTAREAVISUALISATIONBASE_HPP
