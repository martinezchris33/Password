/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef KEYBOARDBUTTONDELETECUSTOMCONTAINERBASE_HPP
#define KEYBOARDBUTTONDELETECUSTOMCONTAINERBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>

class keyboardButtonDeleteCustomContainerBase : public touchgfx::Container
{
public:
    keyboardButtonDeleteCustomContainerBase();
    virtual ~keyboardButtonDeleteCustomContainerBase();
    virtual void initialize();

    /*
     * Custom Trigger Callback Setters
     */
    void setValueDeleteCallback(touchgfx::GenericCallback<>& callback)
    {
        this->valueDeleteCallback = &callback;
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Custom Trigger Emitters
     */
    virtual void emitValueDeleteCallback()
    {
        if (valueDeleteCallback && valueDeleteCallback->isValid())
        {
            this->valueDeleteCallback->execute();
        }
    }

    /*
     * Member Declarations
     */
    touchgfx::ImageButtonStyle< touchgfx::ClickButtonTrigger >  deleteFlexButton;

private:

    /*
     * Custom Trigger Callback Declarations
     */
    touchgfx::GenericCallback<>* valueDeleteCallback;

    /*
     * Callback Declarations
     */
    touchgfx::Callback<keyboardButtonDeleteCustomContainerBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;

    /*
     * Callback Handler Declarations
     */
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);

};

#endif // KEYBOARDBUTTONDELETECUSTOMCONTAINERBASE_HPP
