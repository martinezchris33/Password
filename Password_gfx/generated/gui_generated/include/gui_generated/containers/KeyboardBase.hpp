/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef KEYBOARDBASE_HPP
#define KEYBOARDBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <gui/containers/keyboardButtonSkipLineCustomContainer.hpp>
#include <gui/containers/keyboardButtonDeleteCustomContainer.hpp>
#include <gui/containers/keyboardButtonSpacebarCustomContainer.hpp>
#include <gui/containers/keyboardButtonModeNumberCustomContainer.hpp>
#include <gui/containers/Clavier.hpp>
#include <gui/containers/keyboardButtonModeCapitalLetterCustomContainer.hpp>
#include <gui/containers/Clavier_MAJ.hpp>
#include <gui/containers/keyboardButtonModeCharPartTwoCustomContainer.hpp>
#include <gui/containers/keyboardSpecialCharPartTwoCustomContainer.hpp>
#include <gui/containers/keyboardSpecialCharPartOneCustomContainer.hpp>
#include <gui/containers/keyboardNumberCustomContainer.hpp>
#include <gui/containers/keyboardButtonLanguage.hpp>

class KeyboardBase : public touchgfx::Container
{
public:
    KeyboardBase();
    virtual ~KeyboardBase();
    virtual void initialize();

    /*
     * Custom Actions
     */
    virtual void displayCapitalLetters()
    {
        // Override and implement this function in Screen1
    }
    
    virtual void displayNumbers()
    {
        // Override and implement this function in Screen1
    }
    
    virtual void displayCharactersPartTwo()
    {
        // Override and implement this function in Screen1
    }
    

    /*
     * Custom Trigger Callback Setters
     */
    void setCharactereCallback(touchgfx::GenericCallback<char>& callback)
    {
        this->charactereCallback = &callback;
    }
    void setDeleteLastCharacterCallback(touchgfx::GenericCallback<>& callback)
    {
        this->deleteLastCharacterCallback = &callback;
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Custom Trigger Emitters
     */
    virtual void emitCharactereCallback(char value)
    {
        if (charactereCallback && charactereCallback->isValid())
        {
            this->charactereCallback->execute( value);
        }
    }
    virtual void emitDeleteLastCharacterCallback()
    {
        if (deleteLastCharacterCallback && deleteLastCharacterCallback->isValid())
        {
            this->deleteLastCharacterCallback->execute();
        }
    }

    /*
     * Member Declarations
     */
    touchgfx::Container permanentKeyContainer;
    touchgfx::Box backgroundBox;
    keyboardButtonSkipLineCustomContainer buttonSkipLineContainer;
    keyboardButtonDeleteCustomContainer buttonDeleteContainer;
    keyboardButtonSpacebarCustomContainer buttonSpacebarContainer;
    keyboardButtonModeNumberCustomContainer buttonModeNumberContainer;
    Clavier clavier;
    keyboardButtonModeCapitalLetterCustomContainer buttonModeCapitalLetterContainer;
    Clavier_MAJ clavier_MAJ;
    keyboardButtonModeCharPartTwoCustomContainer buttonModeCharPartTwoContainer;
    keyboardSpecialCharPartTwoCustomContainer specialCharPartTwoContainer;
    touchgfx::Container numberModeContainer;
    keyboardSpecialCharPartOneCustomContainer specialCharPartOneCustomContainer1;
    keyboardNumberCustomContainer numberCustomContainer1;
    keyboardButtonLanguage language;

private:

    /*
     * Custom Trigger Callback Declarations
     */
    touchgfx::GenericCallback<char>* charactereCallback;
    touchgfx::GenericCallback<>* deleteLastCharacterCallback;

    /*
     * Callback Declarations
     */
    touchgfx::Callback<KeyboardBase, char> numberCustomContainer1ValueNumberCallback;
    touchgfx::Callback<KeyboardBase> buttonDeleteContainerValueDeleteCallback;
    touchgfx::Callback<KeyboardBase, char> buttonSpacebarContainerCharValueSpaceCallback;
    touchgfx::Callback<KeyboardBase, char> clavier_MAJClavierCharCallback;
    touchgfx::Callback<KeyboardBase> buttonModeNumberContainerValueModeNumberCallback;
    touchgfx::Callback<KeyboardBase, char> buttonSkipLineContainerCharValueSkipLineCallback;
    touchgfx::Callback<KeyboardBase, char> specialCharPartOneCustomContainer1ValueSpecialCharPartOneCallback;
    touchgfx::Callback<KeyboardBase> buttonModeCharPartTwoContainerValueModeCharPartTwoCallback;
    touchgfx::Callback<KeyboardBase, char> specialCharPartTwoContainerValueSpecialCharPartTwoCallback;
    touchgfx::Callback<KeyboardBase> buttonModeCapitalLetterContainerValueCapitalLetterModeCallback;
    touchgfx::Callback<KeyboardBase, char> clavierClavierCharCallback;
    touchgfx::Callback<KeyboardBase, int8_t> languageLanguageCallback;

    /*
     * Callback Handler Declarations
     */
    void numberCustomContainer1ValueNumberCallbackHandler(char value);
    void buttonDeleteContainerValueDeleteCallbackHandler();
    void buttonSpacebarContainerCharValueSpaceCallbackHandler(char value);
    void clavier_MAJClavierCharCallbackHandler(char value);
    void buttonModeNumberContainerValueModeNumberCallbackHandler();
    void buttonSkipLineContainerCharValueSkipLineCallbackHandler(char value);
    void specialCharPartOneCustomContainer1ValueSpecialCharPartOneCallbackHandler(char value);
    void buttonModeCharPartTwoContainerValueModeCharPartTwoCallbackHandler();
    void specialCharPartTwoContainerValueSpecialCharPartTwoCallbackHandler(char value);
    void buttonModeCapitalLetterContainerValueCapitalLetterModeCallbackHandler();
    void clavierClavierCharCallbackHandler(char value);
    void languageLanguageCallbackHandler(int8_t value);

};

#endif // KEYBOARDBASE_HPP
