/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef KEYBOARDBUTTONSPACEBARCUSTOMCONTAINERBASE_HPP
#define KEYBOARDBUTTONSPACEBARCUSTOMCONTAINERBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>

class keyboardButtonSpacebarCustomContainerBase : public touchgfx::Container
{
public:
    keyboardButtonSpacebarCustomContainerBase();
    virtual ~keyboardButtonSpacebarCustomContainerBase();
    virtual void initialize();

    /*
     * Custom Trigger Callback Setters
     */
    void setCharValueSpaceCallback(touchgfx::GenericCallback<char>& callback)
    {
        this->charValueSpaceCallback = &callback;
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Custom Trigger Emitters
     */
    virtual void emitCharValueSpaceCallback(char value)
    {
        if (charValueSpaceCallback && charValueSpaceCallback->isValid())
        {
            this->charValueSpaceCallback->execute( value);
        }
    }

    /*
     * Member Declarations
     */
    touchgfx::ImageButtonStyle< touchgfx::ClickButtonTrigger >  SpacebarFlexButton;

private:

    /*
     * Custom Trigger Callback Declarations
     */
    touchgfx::GenericCallback<char>* charValueSpaceCallback;

    /*
     * Callback Declarations
     */
    touchgfx::Callback<keyboardButtonSpacebarCustomContainerBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;

    /*
     * Callback Handler Declarations
     */
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);

};

#endif // KEYBOARDBUTTONSPACEBARCUSTOMCONTAINERBASE_HPP
