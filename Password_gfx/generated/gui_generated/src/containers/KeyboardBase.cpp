/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/containers/KeyboardBase.hpp>
#include <touchgfx/Color.hpp>

KeyboardBase::KeyboardBase() :
    charactereCallback(0),
    deleteLastCharacterCallback(0),
    numberCustomContainer1ValueNumberCallback(this, &KeyboardBase::numberCustomContainer1ValueNumberCallbackHandler),
    buttonDeleteContainerValueDeleteCallback(this, &KeyboardBase::buttonDeleteContainerValueDeleteCallbackHandler),
    buttonSpacebarContainerCharValueSpaceCallback(this, &KeyboardBase::buttonSpacebarContainerCharValueSpaceCallbackHandler),
    clavier_MAJClavierCharCallback(this, &KeyboardBase::clavier_MAJClavierCharCallbackHandler),
    buttonModeNumberContainerValueModeNumberCallback(this, &KeyboardBase::buttonModeNumberContainerValueModeNumberCallbackHandler),
    buttonSkipLineContainerCharValueSkipLineCallback(this, &KeyboardBase::buttonSkipLineContainerCharValueSkipLineCallbackHandler),
    specialCharPartOneCustomContainer1ValueSpecialCharPartOneCallback(this, &KeyboardBase::specialCharPartOneCustomContainer1ValueSpecialCharPartOneCallbackHandler),
    buttonModeCharPartTwoContainerValueModeCharPartTwoCallback(this, &KeyboardBase::buttonModeCharPartTwoContainerValueModeCharPartTwoCallbackHandler),
    specialCharPartTwoContainerValueSpecialCharPartTwoCallback(this, &KeyboardBase::specialCharPartTwoContainerValueSpecialCharPartTwoCallbackHandler),
    buttonModeCapitalLetterContainerValueCapitalLetterModeCallback(this, &KeyboardBase::buttonModeCapitalLetterContainerValueCapitalLetterModeCallbackHandler),
    clavierClavierCharCallback(this, &KeyboardBase::clavierClavierCharCallbackHandler),
    languageLanguageCallback(this, &KeyboardBase::languageLanguageCallbackHandler)
{
    setWidth(272);
    setHeight(160);
    permanentKeyContainer.setPosition(0, 1, 272, 159);
    backgroundBox.setPosition(0, 0, 271, 159);
    backgroundBox.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    permanentKeyContainer.add(backgroundBox);

    buttonSkipLineContainer.setXY(215, 115);
    buttonSkipLineContainer.setCharValueSkipLineCallback(buttonSkipLineContainerCharValueSkipLineCallback);
    permanentKeyContainer.add(buttonSkipLineContainer);

    buttonDeleteContainer.setXY(231, 77);
    buttonDeleteContainer.setValueDeleteCallback(buttonDeleteContainerValueDeleteCallback);
    permanentKeyContainer.add(buttonDeleteContainer);

    buttonSpacebarContainer.setXY(113, 116);
    buttonSpacebarContainer.setCharValueSpaceCallback(buttonSpacebarContainerCharValueSpaceCallback);
    permanentKeyContainer.add(buttonSpacebarContainer);

    buttonModeNumberContainer.setXY(55, 116);
    buttonModeNumberContainer.setValueModeNumberCallback(buttonModeNumberContainerValueModeNumberCallback);
    permanentKeyContainer.add(buttonModeNumberContainer);

    add(permanentKeyContainer);

    clavier.setXY(5, 8);
    clavier.setClavierCharCallback(clavierClavierCharCallback);
    add(clavier);

    buttonModeCapitalLetterContainer.setXY(5, 78);
    buttonModeCapitalLetterContainer.setValueCapitalLetterModeCallback(buttonModeCapitalLetterContainerValueCapitalLetterModeCallback);
    add(buttonModeCapitalLetterContainer);

    clavier_MAJ.setXY(3, 7);
    clavier_MAJ.setVisible(false);
    clavier_MAJ.setClavierCharCallback(clavier_MAJClavierCharCallback);
    add(clavier_MAJ);

    buttonModeCharPartTwoContainer.setXY(5, 78);
    buttonModeCharPartTwoContainer.setVisible(false);
    buttonModeCharPartTwoContainer.setValueModeCharPartTwoCallback(buttonModeCharPartTwoContainerValueModeCharPartTwoCallback);
    add(buttonModeCharPartTwoContainer);

    specialCharPartTwoContainer.setXY(32, 7);
    specialCharPartTwoContainer.setVisible(false);
    specialCharPartTwoContainer.setValueSpecialCharPartTwoCallback(specialCharPartTwoContainerValueSpecialCharPartTwoCallback);
    add(specialCharPartTwoContainer);

    numberModeContainer.setPosition(0, 1, 272, 159);
    numberModeContainer.setVisible(false);
    specialCharPartOneCustomContainer1.setXY(-10, -4);
    specialCharPartOneCustomContainer1.setValueSpecialCharPartOneCallback(specialCharPartOneCustomContainer1ValueSpecialCharPartOneCallback);
    numberModeContainer.add(specialCharPartOneCustomContainer1);

    numberCustomContainer1.setXY(5, 6);
    numberCustomContainer1.setValueNumberCallback(numberCustomContainer1ValueNumberCallback);
    numberModeContainer.add(numberCustomContainer1);

    add(numberModeContainer);

    language.setXY(2, 36);
    language.setLanguageCallback(languageLanguageCallback);
    add(language);
}

KeyboardBase::~KeyboardBase()
{

}

void KeyboardBase::initialize()
{
    buttonSkipLineContainer.initialize();
    buttonDeleteContainer.initialize();
    buttonSpacebarContainer.initialize();
    buttonModeNumberContainer.initialize();
    clavier.initialize();
    buttonModeCapitalLetterContainer.initialize();
    clavier_MAJ.initialize();
    buttonModeCharPartTwoContainer.initialize();
    specialCharPartTwoContainer.initialize();
    specialCharPartOneCustomContainer1.initialize();
    numberCustomContainer1.initialize();
    language.initialize();
}

void KeyboardBase::numberCustomContainer1ValueNumberCallbackHandler(char value)
{
    //writeCharacter_Number
    //When numberCustomContainer1 valueNumber emit charactere callback
    //Emit callback
    emitCharactereCallback(value);
}

void KeyboardBase::buttonDeleteContainerValueDeleteCallbackHandler()
{
    //deleteTheLastCharacter
    //When buttonDeleteContainer valueDelete emit deleteLastCharacter callback
    //Emit callback
    emitDeleteLastCharacterCallback();
}

void KeyboardBase::buttonSpacebarContainerCharValueSpaceCallbackHandler(char value)
{
    //addASpace
    //When buttonSpacebarContainer charValueSpace emit charactere callback
    //Emit callback
    emitCharactereCallback(value);
}

void KeyboardBase::clavier_MAJClavierCharCallbackHandler(char value)
{
    //writeCharacter_CapitalLetters
    //When clavier_MAJ clavierChar emit charactere callback
    //Emit callback
    emitCharactereCallback(value);
}

void KeyboardBase::buttonModeNumberContainerValueModeNumberCallbackHandler()
{
    //displayButtons_Numbers
    //When buttonModeNumberContainer valueModeNumber call displayNumbers on Keyboard
    //Call displayNumbers
    displayNumbers();
}

void KeyboardBase::buttonSkipLineContainerCharValueSkipLineCallbackHandler(char value)
{
    //skipALine
    //When buttonSkipLineContainer charValueSkipLine emit charactere callback
    //Emit callback
    emitCharactereCallback(value);
}

void KeyboardBase::specialCharPartOneCustomContainer1ValueSpecialCharPartOneCallbackHandler(char value)
{
    //writeCharacter_SpecialCharPartOne
    //When specialCharPartOneCustomContainer1 valueSpecialCharPartOne emit charactere callback
    //Emit callback
    emitCharactereCallback(value);
}

void KeyboardBase::buttonModeCharPartTwoContainerValueModeCharPartTwoCallbackHandler()
{
    //displayButtons_SpecialCharPartTwo
    //When buttonModeCharPartTwoContainer valueModeCharPartTwo call displayCharactersPartTwo on Keyboard
    //Call displayCharactersPartTwo
    displayCharactersPartTwo();
}

void KeyboardBase::specialCharPartTwoContainerValueSpecialCharPartTwoCallbackHandler(char value)
{
    //writeCharacter_SpecialCharPartTwo
    //When specialCharPartTwoContainer valueSpecialCharPartTwo emit charactere callback
    //Emit callback
    emitCharactereCallback(value);
}

void KeyboardBase::buttonModeCapitalLetterContainerValueCapitalLetterModeCallbackHandler()
{
    //displayButtons_CapitalLetters
    //When buttonModeCapitalLetterContainer valueCapitalLetterMode call displayCapitalLetters on Keyboard
    //Call displayCapitalLetters
    displayCapitalLetters();
}

void KeyboardBase::clavierClavierCharCallbackHandler(char value)
{
    //writeCharacter_Letters
    //When clavier clavierChar emit charactere callback
    //Emit callback
    emitCharactereCallback(value);
}

void KeyboardBase::languageLanguageCallbackHandler(int8_t value)
{
    //choiceLanguage
    //When language language call language on clavier
    //Call language
    clavier.language(value);
    //choiceLanguageCapital
    //When language language call language on clavier_MAJ
    //Call language
    clavier_MAJ.language(value);
}
