/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */

#include <stdarg.h>
#include <touchgfx/TextProvider.hpp>
#include <touchgfx/Texts.hpp>
#include <touchgfx/TypedText.hpp>
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
    va_end(pArg);
    return width;
}

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
    va_end(pArg);
    return width;
}

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
    {
        substituteGlyphs();
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
}

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
    va_list pArg;
    va_start(pArg, format);
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
    va_end(pArg);
}

// Default TypedTextDatabase
extern const touchgfx::TypedText::TypedTextData* const typedTextDatabaseArray[];

TEXT_LOCATION_FLASH_PRAGMA
KEEP extern const touchgfx::Unicode::UnicodeChar texts_all_languages[] TEXT_LOCATION_FLASH_ATTRIBUTE = {
    0x2, 0x0, // @0 "<>"
    0x2e, 0x2e, 0x2e, 0x0, // @2 "..."
    0x46, 0x52, 0x0, // @6 "FR"
    0x55, 0x4b, 0x0, // @9 "UK"
    0x21, 0x0, // @12 "!"
    0x22, 0x0, // @14 """
    0x23, 0x0, // @16 "#"
    0x24, 0x0, // @18 "$"
    0x25, 0x0, // @20 "%"
    0x26, 0x0, // @22 "&"
    0x27, 0x0, // @24 "'"
    0x28, 0x0, // @26 "("
    0x29, 0x0, // @28 ")"
    0x2a, 0x0, // @30 "*"
    0x2b, 0x0, // @32 "+"
    0x2c, 0x0, // @34 ","
    0x2d, 0x0, // @36 "-"
    0x2f, 0x0, // @38 "/"
    0x30, 0x0, // @40 "0"
    0x31, 0x0, // @42 "1"
    0x32, 0x0, // @44 "2"
    0x33, 0x0, // @46 "3"
    0x34, 0x0, // @48 "4"
    0x35, 0x0, // @50 "5"
    0x36, 0x0, // @52 "6"
    0x37, 0x0, // @54 "7"
    0x38, 0x0, // @56 "8"
    0x39, 0x0, // @58 "9"
    0x3a, 0x0, // @60 ":"
    0x3b, 0x0, // @62 ";"
    0x3c, 0x0, // @64 "<"
    0x3d, 0x0, // @66 "="
    0x3e, 0x0, // @68 ">"
    0x3f, 0x0, // @70 "?"
    0x40, 0x0, // @72 "@"
    0x41, 0x0, // @74 "A"
    0x42, 0x0, // @76 "B"
    0x43, 0x0, // @78 "C"
    0x44, 0x0, // @80 "D"
    0x45, 0x0, // @82 "E"
    0x46, 0x0, // @84 "F"
    0x47, 0x0, // @86 "G"
    0x48, 0x0, // @88 "H"
    0x49, 0x0, // @90 "I"
    0x4a, 0x0, // @92 "J"
    0x4c, 0x0, // @94 "L"
    0x4d, 0x0, // @96 "M"
    0x4e, 0x0, // @98 "N"
    0x4f, 0x0, // @100 "O"
    0x50, 0x0, // @102 "P"
    0x51, 0x0, // @104 "Q"
    0x53, 0x0, // @106 "S"
    0x54, 0x0, // @108 "T"
    0x55, 0x0, // @110 "U"
    0x56, 0x0, // @112 "V"
    0x57, 0x0, // @114 "W"
    0x58, 0x0, // @116 "X"
    0x59, 0x0, // @118 "Y"
    0x5a, 0x0, // @120 "Z"
    0x5b, 0x0, // @122 "["
    0x5c, 0x0, // @124 "\"
    0x5d, 0x0, // @126 "]"
    0x5e, 0x0, // @128 "^"
    0x5f, 0x0, // @130 "_"
    0x61, 0x0, // @132 "a"
    0x62, 0x0, // @134 "b"
    0x63, 0x0, // @136 "c"
    0x64, 0x0, // @138 "d"
    0x65, 0x0, // @140 "e"
    0x66, 0x0, // @142 "f"
    0x67, 0x0, // @144 "g"
    0x68, 0x0, // @146 "h"
    0x69, 0x0, // @148 "i"
    0x6a, 0x0, // @150 "j"
    0x6b, 0x0, // @152 "k"
    0x6c, 0x0, // @154 "l"
    0x6d, 0x0, // @156 "m"
    0x6e, 0x0, // @158 "n"
    0x6f, 0x0, // @160 "o"
    0x70, 0x0, // @162 "p"
    0x71, 0x0, // @164 "q"
    0x72, 0x0, // @166 "r"
    0x73, 0x0, // @168 "s"
    0x74, 0x0, // @170 "t"
    0x75, 0x0, // @172 "u"
    0x76, 0x0, // @174 "v"
    0x77, 0x0, // @176 "w"
    0x78, 0x0, // @178 "x"
    0x79, 0x0, // @180 "y"
    0x7a, 0x0, // @182 "z"
    0x7b, 0x0, // @184 "{"
    0x7c, 0x0, // @186 "|"
    0x7d, 0x0, // @188 "}"
    0x7e, 0x0 // @190 "~"
};

TEXT_LOCATION_FLASH_PRAGMA
KEEP extern const uint32_t indicesGb[] TEXT_LOCATION_FLASH_ATTRIBUTE;

// Array holding dynamically installed languages
struct TranslationHeader
{
    uint32_t offset_to_texts;
    uint32_t offset_to_indices;
    uint32_t offset_to_typedtext;
};
static const TranslationHeader* languagesArray[1] = { 0 };

// Compiled and linked in languages
static const uint32_t* const staticLanguageIndices[] = {
    indicesGb
};

touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
    {
        if (languagesArray[id] != 0)
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
            currentLanguageIndices = staticLanguageIndices[id];
            currentLanguageTypedText = typedTextDatabaseArray[id];
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
    }
}

void touchgfx::Texts::setTranslation(touchgfx::LanguageId id, const void* translation)
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
}
